# This workflow will build a package using Maven and then publish it to GitHub packages when pushed to main.
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Needed to upload release assets
      packages: write

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@3b6c050358614dd082e53cdbc55580431fc4e437
      with:
        java-version: '21'
        distribution: 'corretto'
        cache: maven

    - name: Build with Maven
      run: mvn -Dmaven.test.skip=true -B package --file pom.xml

    - name: Rename JAR for release
      run: |
        JAR_FILE=$(find target -type f -name "*-jar-with-dependencies.jar" | head -n 1)
        mv "$JAR_FILE" target/pop-analysis-${{ github.event.release.tag_name }}.jar

    - name: Upload JAR to GitHub Release (via @actions/github-script)
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'target/pop-analysis-${{ github.event.release.tag_name }}.jar';
          const stat = fs.statSync(path);
          const releaseId = ${{ github.event.release.id }};
          
          const response = await github.rest.repos.uploadReleaseAsset({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: releaseId,
            name: 'pop-analysis.jar',
            data: fs.readFileSync(path),
            headers: {
              'content-type': 'application/java-archive',
              'content-length': stat.size,
            },
          });
          core.info(`Uploaded asset: ${response.data.browser_download_url}`);
